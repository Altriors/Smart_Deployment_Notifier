name: Smart Deploy and Notify

on:
  push:
    branches: [main, production]
  pull_request:
    types: [closed]
    branches: [main]

env:
  DOCKER_IMAGE: myapp
  REGISTRY: ghcr.io

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Start Build Timer
        id: timer
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Run Tests
        id: tests
        run: |
          pytest tests/ --cov=src --cov-report=term-missing > test_results.txt
          TEST_RESULT=$?
          COVERAGE=$(grep "TOTAL" test_results.txt | awk '{print $NF}')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_OUTPUT
          echo "TEST_STATUS=$TEST_RESULT" >> $GITHUB_OUTPUT
          cat test_results.txt
          exit $TEST_RESULT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        id: build
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
          docker tag ${{ env.DOCKER_IMAGE }}:${{ github.sha }} ${{ env.DOCKER_IMAGE }}:latest

      - name: Get Image Size
        id: image_size
        run: |
          IMAGE_SIZE=$(docker image inspect ${{ env.DOCKER_IMAGE }}:${{ github.sha }} --format='{{.Size}}')
          IMAGE_SIZE_MB=$(echo "scale=2; $IMAGE_SIZE / 1048576" | bc)
          echo "SIZE_MB=$IMAGE_SIZE_MB" >> $GITHUB_OUTPUT

      - name: Calculate Build Time
        id: build_time
        run: |
          END_TIME=$(date +%s)
          START_TIME=${{ steps.timer.outputs.START_TIME }}
          BUILD_TIME=$((END_TIME - START_TIME))
          MINUTES=$((BUILD_TIME / 60))
          SECONDS=$((BUILD_TIME % 60))
          echo "DURATION=${MINUTES}m ${SECONDS}s" >> $GITHUB_OUTPUT

      - name: Notify Telegram
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        if: always() && env.BOT_TOKEN != ''
        run: |
          if [ "${{ steps.tests.outcome }}" == "success" ]; then
            STATUS_TEXT="Success"
          else
            STATUS_TEXT="Failed"
          fi

          COMMIT_MSG=$(git log -1 --pretty=%B | head -n 1)
          
          MESSAGE="Deployment ${STATUS_TEXT}
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Author: ${{ github.actor }}
          Commit: ${{ github.sha }}
          
          Build Stats:
          Build Time: ${{ steps.build_time.outputs.DURATION }}
          Image Size: ${{ steps.image_size.outputs.SIZE_MB }} MB
          Coverage: ${{ steps.tests.outputs.COVERAGE }}
          
          Message: ${COMMIT_MSG}"

          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\": \"${CHAT_ID}\", \"text\": \"${MESSAGE}\", \"parse_mode\": \"Markdown\", \"disable_web_page_preview\": true}"